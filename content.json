{"pages":[{"title":"正在整理中 。。。。。。","text":"","link":"/about/index.html"}],"posts":[{"title":"hexo博客搭建教程","text":"###简介 Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。 ###安装 因自己使用的mac电脑，这里以mac安装发布为例，windows大体差不多。 1.1电脑本地创建一个文件夹，例如我这里的blog。 1.2 打开电脑终端执行以下命令： 12$npm install -g hexo-cli$ hexo init 如果npm指令出现此报错zsh: command not found: node,需安装nodejs环境,下载链接 1.3 安装完成后，指定文件夹的目录如下 ├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中_config.yml文件用于存放网站的配置信息，你可以在此配置大部分的参数；scaffolds是存放模板的文件夹，当新建文章时，Hexo会根据scaffold来建立文件；source是资源文件夹，用于存放用户资源，themes是主题文件夹，存放博客主题，Hexo 会根据主题来生成静态页面。 1.4生成静态博客，在终端执行命令： 1hexo s Hexo将source文件夹中的Markdown 和 HTML 文件会被解析并放到public文件夹中，public文件夹用于存放静态博客文件，相当于网站根目录。至此博客雏形基本完成，在浏览器中访问http://localhost:4000/，如图所示： 2.1主题更换 前往主题页，选择喜欢的主题： 2.2 挑选喜欢的主题后，将主题clone到blog的themes文件夹下 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 2.3 修改_config.yml中对应的主题字段为你选择的主题名 到此主题更换成功，可以本地hexo s本地看看是否替换成功。 3.1发布到github 可以参看这篇文章：怎么把Hexo的博客托管到Git上 4.常用hexo命令 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 指令缩写 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令 12hexo s -g #生成并本地预览hexo d -g #生成并上传","link":"/2019/09/06/hexo博客搭建教程/"},{"title":"","text":"逆向环境搭建iPhone越狱操作pp助手 爱思助手(一键越狱未成功) 刚开始使用unc0ver对几款iphone进行越狱安装后均显示不支持,所以改用checkra1n 先将官网放上https://checkra.in/ 刚开始用的官网下载的0.9.8.2刷机均中途报错 Exploit Failed (Error code: -31) 或 Timed out waiting for bootstrap upload(Likely caused by an incompatible tweak, to enable Safe Mode check the option on main screen) (Error code: -20) 后搜到这篇文章,看到有0.10.0版本的过段换最新的试试. https://mrmad.com.tw/checkra1n 最后贴上越狱成功下载地址 [v0.10.0 Beta](https://assets.checkra.in/test/checkra1n beta 0.10.0.dmg) mac远程登录iPhone通过ssh让mac远程登录iphone 1.手机端安装Cydia安装openssh工具 2.使用查看插件descrition中的描述 3.确保mac和iphone在同一局域网下,在mac的终端输入ssh 账户名@服务器主机地址 例如ssh root@10.1.1.168 (初始密码一般为alpine) 4.退出连接 exit 相关拓展: iOS下有2个常用账户:root/mobile root:最高权限账户,$HOME是/var/root mobile:普通权限账户,只能操作一些普通文件,不能操作系统级别的文件,$HOME是/var/mobile 修改登录密码 passwd 修改root密码 Passwd mobile 修改mobile用户密码 参考文章链接 Cycript通过cydia安装cycript可在iphone上调试运行中的app 常用指令 开启 cycript cycript -p 进程ID cycript -p 进程名称 取消输入: Ctrl + C 退出: Ctrl + D 清屏:Command + R 常用语法 UIApp 获取app对象 #内存地址 用内存地址获取对象 ObjectiveC.classes 已加载的所有OC类 *对象 查看对象的所有成员变量 view.recursiveDescription().toString() 递归打印view的所有子控件 choose(UITableViewCell) 筛选出某种类型的对象 mj工具类 ps命令手机安装adv-cmds插件 使用ps命令可以列出系统当前的进程 列出所有的进程 ps -A ps aux 搜索关键词 ps -A|grep 关键词 Reveal界面调试工具可以用其找到对应要操作视图类 Mach-O Class-dump对Mach-o文件进行静态分析,导出对应的头文件 导出指令 Class-dump -H Mach-O 文件路径 -o 头文件存放目录 -H表示要生成头文件 -o用于制定头文件的存放目录 头文件导出,可导出oc,swift过滤 http://stevenygard.com/projects/class-dump/ 参考 脱壳加壳是通过特殊算法,对可执行文件的编码进行改变(比如压缩/加密),以达到保护程序代码的目的. 脱壳就是将未加密的文件还原出来. 手机安装crackerXI插件,获取脱壳后文件,使用ifunbox将其导出. 实战课参考此文章","link":"/2020/04/09/app逆向笔记/"},{"title":"ES6学习笔记","text":"ES6:ECMAScript是JavaScript的标准，JS是ES的实现，主流实现只有JS，所以很多时候JS就等同于ECMA正式名称：ES2015，是ECMA标准的第六版 变量: var存在的问题: 12345678910111、重复声明： var a=12; var a=5；2、控制修改： var GIT_HOST='github.com' if(GIT_HOST='git')3、块级作用域： ES5的var作用域——函数级 ES6的let作用域——块级 let:变量,防止重复定义const:常量,防止重复定义 小总结： 变量： var:重复声明，不能限制修改，函数级 let:不能重复声明，变量,块级 const:不能重复声明,常量，块级 解构赋值: json = {a:12,b:5}; let (a,b)=json; arr = [1,2,3]; let [a,b,c]= arr; 12345671、两边结构必须一样 let {a,b}=[1,2]2、右边必须是个东西 let {a,b}={1,2}3、赋值与解构同时完成 let {a,b}; {a,b}={a:1,b:2} 箭头函数: function(){ ..... } ()=&gt;{}简写： 1、如果有且仅有一个参数，（）可不写 2、如果有且仅有一个语句并且是return，{}也可以不写 修正this … 参数展开 收集 展开 数组展开json展开 Array扩展: map 映射，一一对应（n=&gt;n）reduce n=&gt;1filter 过滤（n=&gt;?）forEach 遍历 模板字符串: 1234let arr=[12,56,87,95,64]; arr.forEach((item,index) =&gt; { alert(`第${index}个：${item}`); }); JSON: stringify:JSON-&gt;字符串Parse:json字符串-&gt;JSON babel编译 本地使用: 1、安装node 2、安装babel npm i @babel/core @babel/cli @babel/preset-env npm i @babel/polyfill 3、添加脚本 &quot;build&quot;:&quot;babel src -d dest&quot; 4、添加配置 { &quot;presets&quot;:{ &quot;@babel/preset-env&quot; } } 5、执行 npm run build 异步操作: 异步操作：同时进行多个操作，用户体验，es6之前代码混乱同步操作：一次只能进行一个操作，用户体验不好，代码清晰 异步的同步写法: Promise 1、封装 2、promise.all{[ p1, p2, ... ]}.then 3、promise.race async/await 普通函数——一直执行，直到结束 async函数——能够&quot;暂停&quot;12345678910111213141516171819let p = new Promise(function(resolve,reject){ $.ajax({ url:'data/1.txt', dataType:'json', success(arr){ resolve(arr); }, error(res){ reject(res); } })});p.then(function(arr){ alert(\"成功\"); console.log(arr);},function(res){ alert(\"失败\"); console.log(res);}); 面向对象 语言发展： 机器语言-&gt;汇编语言-&gt;低级语言（面向过程）-&gt;高级语言（面向对象）-&gt;模块系统-&gt;框架-&gt;系统接口（API） 封装 ES5面向对象（假的） 没有统一的写法 ES6面向对象（假的） 统一的写法继承： 1、省事 2、便于扩展 ES6新加： class 类声明 constructor 构造函数 extends 继承 super 父类/超类 模块系统 1、定义 2、使用 1、导出（export） //变量 export let a=1; //函数 export function show(){ …… } //类 export calss Person{ ……. } //默认成员 export default ​ 2、导入​ import * as model from xxx 引入所有成员​ import model from xxx 引入default成员​ import {a,b as name} from xxx​ //只引入，不使用​ import ‘xxx’​ //异步引入​ let p=import(xxxx)​ 3、webpack编译 (因暂时浏览器不支持模块化,所以是有wp编译)","link":"/2020/04/22/ES6学习笔记/"},{"title":"Markdown常用语法","text":"第一章 块元素1.1标题标题有6个等级，用#号表示 1234567# 标题1## 标题2## 标题2### 标题2#### 标题4##### 标题5###### 标题6 1.2引用使用&gt;字符，表示引用 123&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt; This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. This is a blockquote with two paragraphs. This is first paragraph.This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. 1.3列表12* red* blue red blue 121. red2. blue red blue 1.4任务列表用 [ ] 或者 [X] 未完成，完成）表示列表，通过点击复选框来更改状态（完成/未完成） 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed a task list item list syntax required normal formatting, @mentions, #1234 refs incomplete completed 1.5代码块使用 按回车键，将会对代码进行高亮12 ​1234require 'redcarpet'markdown = Redcarpet.new(\"Hello World!\")puts markdown.to_html​ 12345```rubyrequire &apos;redcarpet&apos;markdown = Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html ###1.6数学 可以使用MathJax呈现LaTeX数学表达式 1234567$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\\\end{vmatrix}$$ $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$ 1.7表格使用 | First Header | Second Header | 按回车键，将会创建2列的表格 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | First Header Second Header Content Cell Content Cell Content Cell Content Cell 还可以使用 : 号，来设置文字对齐方式 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 ###1.8 脚注 1234使用 [^footnote] 创建脚注.You can create footnotes like this[^1].[^1]: Here is the *text* of the **footnote**.然后，可以把鼠标停留在脚注中，查看内容 You can create footnotes like this[^1].[^1]: Here is the text of the footnote. 1.10横线输入 *** 或者 — 后，按回车键 1.11目录输入 [toc] ，按回车键 [TOC] 第二章 Span元素2.1链接文字描述包含在 [] 内，链接地址包含在 () 内，() 要紧接着 [] 后面 12This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. This is an example inline link.This link has no title attribute. 2.1.1引用链接123[Bing][]And then define the link:[Bing]: http://bing.com/ BingAnd then define the link: 2.2图片123在链接格式前面添加 ! ，如下![在这里插入图片描述](http://pxebjkhug.bkt.clouddn.com/image-20190906161123468.png) 在链接格式前面添加 ! ，如下 ###2.3 强调 对应 HTML 的 标签 12*single asterisks*_single underscores_ single asterisks single underscores 如果像使用 * 号，在 * 号前使用 \\ 1\\*this text is surrounded by literal asterisks\\* *this text is surrounded by literal asterisks* 2.4加粗12**double asterisks**__double underscores__ double asterisksdouble underscores 2.5代码在文章中现实代码，用 ` 号表示 1Use the `printf()` function. Use the printf() function. 2.6删除线1~~Mistaken text.~~ Mistaken text. 2.7下划线1&lt;u&gt;Underline&lt;/u&gt; Underline ###2.8Emoji 表情 用两个 : 号包含单词，或者在 编辑 -&gt; 表情与符号 中选择 1:happy: :happy: 2.9高亮这个功能默认是关闭的，如果要打开这个功能（以 Mac 版本为例），选择 Typora -&gt; 偏好设置 -&gt; markdown 标签，勾选高亮复选框 1==highlight== ==highlight==","link":"/2019/09/10/Markdown常用语法/"},{"title":"小程序学习笔记","text":"尺寸单位rpx,规定屏幕宽为750rpx flex布局flex布局是小程序经常使用布局方式 开启方式: display:flex; (black-level形式存在) 或 display:inline-flex; (inline-level形式存在) 开启flex布局的元素叫flex container,其中直系子元素叫做flex items 属性flex-derection决定了main axis的方向 属性值: row | row-reverse | column | column-reverse justify-content决定了flex items在main axis上的对其方式 flex-start(默认值):与main start对齐 flex-end:与main-end对齐 center:居中对齐 space-between:items之间的距离相等,与main-start,main-end两端对齐 Space-evenly:items之间的距离相等,items与main-start,main-end之间的距离等于items之间的距离. Space-around:items之间的距离相等,与main-start,main-end之间的距离等于items之间的距离的一半 Align-items决定了在cross axis上的对其方式 stretcha(默认值):当flex-items在cross axis方向的size为auto时,会自动拉伸至填充flex container Flex-start:与cross start对齐 Flex-end:与cross end对齐 center: 居中对齐 Baseline:与基准下对齐 Flex-wrap决定了flex container是单行还是多行 nowrap(默认):单行 wrap:多行 Wrap-reverse:多行(对比wrap,cross start与cross end相反) flex-flow是flex-derection || flex-wrap的简写 比如flex-flow:column wrap等价于 Flex-derection:colunm Flex-warp:warp Align-content决定了多行flex items在cross axis上的对齐方式,用法与justify-content类似 stretch(默认值):与align-items的stretch类似 Flex-start:与cross start对齐 Flex-end:与cross end对齐 Center:居中对齐 Space-between:items之间的距离相等,与cross-start,cross-end两端对齐 Space-around:items之间的距离相等,与cross-start,cross-end之间的距离等于items之间的距离的一半 Space-evenly:items之间的距离相等,items与cross-start,cross-end之间的距离等于items之间的距离. order决定了flex items的排布顺序 可以设置任意整数(正负数/0),值越小就越排在前面 默认值为0 Align-self flex items可以通过align-self覆盖flex contaner设置的align-items auto(默认值):遵从flex container的align-items设置 Stretch/flex-start/flex-end/center/baseline Flex-grow决定了flex items如何扩展多余空间 可以设置任意非负数字(正数/0),默认值是0 当flex container在main axis方向上有剩余size时,flex-grow属性才有效 flex-shrink决定了flex items如何收缩 可以设置任意非负数字(正数/0),默认值是1 当flex itemx在main axis方向上超过了flex container的size,flex-shrink属性才有效 flex-basis用来设置flex items在main axis方向上的bese size auto(默认值): content:取决于内容本身的size 决定了flex items最终base size的因素,游戏那几从高到低 Max-width\\max-height\\min-width\\min-height Flex-basis Width\\height 内容本身的size flex是flex-grow flex-grow flex-shrink? || flex-basis的简写 默认值 0 1 auto none:0 0 auto","link":"/2020/04/22/小程序学习笔记/"},{"title":"栈","text":"","link":"/2019/09/11/栈/"},{"title":"树","text":"","link":"/2019/09/16/树/"},{"title":"线性表","text":"","link":"/2019/09/11/线性表/"},{"title":"队列","text":"","link":"/2019/09/11/队列/"}],"tags":[{"name":"hexo博客","slug":"hexo博客","link":"/tags/hexo博客/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"小程序","slug":"小程序","link":"/tags/小程序/"},{"name":"栈","slug":"栈","link":"/tags/栈/"},{"name":"树","slug":"树","link":"/tags/树/"},{"name":"线性表","slug":"线性表","link":"/tags/线性表/"},{"name":"队列","slug":"队列","link":"/tags/队列/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/技术/"},{"name":"其他","slug":"其他","link":"/categories/其他/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"数据结构","slug":"数据结构","link":"/categories/数据结构/"}]}